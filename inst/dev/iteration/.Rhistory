seq_along(my_list)
# This returns a single value of my_list
seq_along(my_list)[1]
# This gets all items at index 1 in my_list
my_list[[seq_along(my_list)[1]]]
tolower(my_list[[1]])
tolower(my_list[[3]])
vector(mode = "list", length = 3)
# define capture object
output_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
output_list[[x]] <- tolower(my_list[[x]])
}
output_list
# define capture object
output_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
output_list[[x]] <- tolower(my_list[[x]])
# clean up container
names(output_list) <- c("words", "sentences", "letters")
}
output_list
(function(x) tolower(x))("pIrAtES Ship")
(\(x) tolower(x))("pIrAtES Ship")
lapply(X = my_list, FUN = tolower)
str(my_list[1])
sapply(X = my_list[1], FUN = tolower)
str(my_list[[1]])
sapply(X = my_list[[1]], FUN = tolower)
identical(x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower))
identical(
# standard
x = lapply(X = my_list, FUN = tolower),
# anonymous shorthand
y = my_list |> lapply(\(x) tolower(x))
)
identical(
# standard
x = sapply(X = my_list, FUN = tolower),
# anonymous shorthand
y = my_list |> sapply(\(x) tolower(x))
)
my_words <- my_list[['words']]
tolower(my_words)
purrr::map(.x = my_list, .f = tolower)
# compare outputs
identical(
# standard syntax
x = purrr::map(.x = my_list,
.f = tolower),
# shorthand anonymous function
y = my_list |>
purrr::map(\(x) tolower(x))
)
mixed_list <- list(booleans = c(FALSE, TRUE, FALSE, TRUE),
integers = c(3L, 4L, 2L, 9L, 1L),
doubles = c(3.041, 2.735, 2.987, 3.044, 2.95),
strings = c("true", "depend", "client", "equal", "round"),
dates = structure(c(19453, 19413, 19363), class = "Date"))
mixed_list |> names()
mixed_list |> purrr::map_lgl(\(x) is.logical(x))
mixed_list |> purrr::map_int(\(x) is.integer(x))
mixed_list |> purrr::map_dbl(\(x) is.double(x))
mixed_list |> purrr::map_chr(\(x) is.character(x))
mixed_list |> purrr::map_vec(\(x) is.character(x))
mixed_list |> purrr::map_vec(\(x) lubridate::is.Date(x))
knitr::include_graphics("img/github-raw-url.png")
# get example URL
nyt_url <- "https://raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv"
# extract directory (i.e. common domain from URL)
nyt_dir_url <- fs::path_dir(nyt_url)
nyt_dir_url
# create file names for 7th through 13th
nyt_file_nms <- paste0("nyt", 7:13, ".csv")
head(nyt_file_nms, 3)
# combine domain with file name
nyt_file_urls <- paste(nyt_dir_url, nyt_file_nms, sep = "/")
head(nyt_file_urls, 3)
nyt_local_dir <- "dds-nyt"
# create folder
fs::dir_create(nyt_local_dir)
# create file paths
nyt_local_pths <- paste(nyt_local_dir, nyt_file_nms, sep = "/")
head(nyt_local_pths)
knitr::include_graphics("img/progress.png")
# get file paths
file_pths <- list.files("dds-nyt", full.names = TRUE, pattern = ".csv$")
# do it for one
gsub(pattern = "^dds-nyt", replacement = "dds-nyt/raw", x = file_pths[1])
# map it across all
raw_file_pths <- file_pths |>
purrr::map_chr(\(x) gsub(x,
pattern = "^dds-nyt",
replacement = "dds-nyt/raw"))
raw_file_pths
fs::dir_create("dds-nyt/raw")
# do it for one
fs::file_copy(
path = file_pths[1],
new_path = raw_file_pths[1],
overwrite = TRUE)
library(metathis)
meta() %>%
meta_general(
description = "Intro to purrr",
generator = "xaringan and remark.js"
) %>%
meta_name("github-repo" = "mjfrigaard/pdg-r/")
dateWritten <- format(as.Date('2022-01-09'), format = "%B %d %Y")
today <- format(Sys.Date(), format = "%B %d %Y")
library(knitr)
library(tidyverse)
library(fontawesome)
options(
htmltools.dir.version = FALSE,
knitr.table.format = "html",
knitr.kable.NA = ''
)
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3 # Better figure resolution
)
source("utils.R")
mixed_list <- make_mixed_list()
# Enables the ability to show all slides in a tile overview by pressing "o"
xaringanExtra::use_tile_view()
xaringanExtra::use_panelset()
xaringanExtra::use_clipboard()
xaringanExtra::use_share_again()
xaringanExtra::style_share_again(share_buttons = "all")
xaringanExtra::use_extra_styles(
hover_code_line = TRUE,
mute_unhighlighted_code = FALSE
)
my_list <- list(
words = c("bLOW", "FOLloW", "cOMMOn",
"ORiginAL", "UsUal"),
sentences = c(
"HE TaKeS tHE oatH OF offICe EaCH mArcH.",
"THE OfficE pAINt waS A dUll, saD TAn.",
"faRMers CAmE iN TO ThREsH tHe OAT crOP."
),
letters = c("l", "y", "d", "p", "h",
"e", "v", "M", "R", "Z")
)
my_list
tolower(x = my_list)
tolower(x = my_list$words)
tolower(x = my_list$sentences)
tolower(x = my_list$letters)
# This generates a full sequence for my_list
seq_along(my_list)
# This returns a single value of my_list
seq_along(my_list)[1]
# This gets all items at index 1 in my_list
my_list[[seq_along(my_list)[1]]]
tolower(my_list[[1]])
tolower(my_list[[3]])
vector(mode = "list", length = 3)
# define capture object
output_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
output_list[[x]] <- tolower(my_list[[x]])
}
output_list
# define capture object
output_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
output_list[[x]] <- tolower(my_list[[x]])
# clean up container
names(output_list) <- c("words", "sentences", "letters")
}
output_list
(function(x) tolower(x))("pIrAtES Ship")
(\(x) tolower(x))("pIrAtES Ship")
lapply(X = my_list, FUN = tolower)
str(my_list[1])
sapply(X = my_list[1], FUN = tolower)
str(my_list[[1]])
sapply(X = my_list[[1]], FUN = tolower)
identical(x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower))
identical(
# standard
x = lapply(X = my_list, FUN = tolower),
# anonymous shorthand
y = my_list |> lapply(\(x) tolower(x))
)
identical(
# standard
x = sapply(X = my_list, FUN = tolower),
# anonymous shorthand
y = my_list |> sapply(\(x) tolower(x))
)
my_words <- my_list[['words']]
tolower(my_words)
purrr::map(.x = my_list, .f = tolower)
# compare outputs
identical(
# standard syntax
x = purrr::map(.x = my_list,
.f = tolower),
# shorthand anonymous function
y = my_list |>
purrr::map(\(x) tolower(x))
)
mixed_list <- list(booleans = c(FALSE, TRUE, FALSE, TRUE),
integers = c(3L, 4L, 2L, 9L, 1L),
doubles = c(3.041, 2.735, 2.987, 3.044, 2.95),
strings = c("true", "depend", "client", "equal", "round"),
dates = structure(c(19453, 19413, 19363), class = "Date"))
mixed_list |> names()
mixed_list |> purrr::map_lgl(\(x) is.logical(x))
mixed_list |> purrr::map_int(\(x) is.integer(x))
mixed_list |> purrr::map_dbl(\(x) is.double(x))
mixed_list |> purrr::map_chr(\(x) is.character(x))
mixed_list |> purrr::map_vec(\(x) is.character(x))
mixed_list |> purrr::map_vec(\(x) lubridate::is.Date(x))
knitr::include_graphics("img/github-raw-url.png")
# get example URL
nyt_url <- "https://raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv"
# extract directory (i.e. common domain from URL)
nyt_dir_url <- fs::path_dir(nyt_url)
nyt_dir_url
# create file names for 7th through 13th
nyt_file_nms <- paste0("nyt", 7:13, ".csv")
head(nyt_file_nms, 3)
# combine domain with file name
nyt_file_urls <- paste(nyt_dir_url, nyt_file_nms, sep = "/")
head(nyt_file_urls, 3)
nyt_local_dir <- "dds-nyt"
# create folder
fs::dir_create(nyt_local_dir)
# create file paths
nyt_local_pths <- paste(nyt_local_dir, nyt_file_nms, sep = "/")
head(nyt_local_pths)
knitr::include_graphics("img/progress.png")
# get file paths
file_pths <- list.files("dds-nyt", full.names = TRUE, pattern = ".csv$")
# do it for one
gsub(pattern = "^dds-nyt", replacement = "dds-nyt/raw", x = file_pths[1])
file_pths
xaringan::inf_mr()
styler:::style_selection()
library(metathis)
meta() %>%
meta_general(
description = "Intro to purrr",
generator = "xaringan and remark.js"
) %>%
meta_name("github-repo" = "mjfrigaard/pdg-r/")
dateWritten <- format(as.Date('2022-01-09'), format = "%B %d %Y")
today <- format(Sys.Date(), format = "%B %d %Y")
library(knitr)
library(tidyverse)
library(fontawesome)
options(
htmltools.dir.version = FALSE,
knitr.table.format = "html",
knitr.kable.NA = ''
)
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3 # Better figure resolution
)
source("utils.R")
mixed_list <- make_mixed_list()
# Enables the ability to show all slides in a tile overview by pressing "o"
xaringanExtra::use_tile_view()
xaringanExtra::use_panelset()
xaringanExtra::use_clipboard()
xaringanExtra::use_share_again()
xaringanExtra::style_share_again(share_buttons = "all")
xaringanExtra::use_extra_styles(
hover_code_line = TRUE,
mute_unhighlighted_code = FALSE
)
my_list <- list(
words = c("bLOW", "FOLloW", "cOMMOn",
"ORiginAL", "UsUal"),
sentences = c(
"HE TaKeS tHE oatH OF offICe EaCH mArcH.",
"THE OfficE pAINt waS A dUll, saD TAn.",
"faRMers CAmE iN TO ThREsH tHe OAT crOP."
),
letters = c("l", "y", "d", "p", "h",
"e", "v", "M", "R", "Z")
)
my_list
tolower(x = my_list)
tolower(x = my_list$words)
tolower(x = my_list$sentences)
tolower(x = my_list$letters)
# This generates a full sequence for my_list
seq_along(my_list)
# This returns a single value of my_list
seq_along(my_list)[1]
# This gets all items at index 1 in my_list
my_list[[seq_along(my_list)[1]]]
tolower(my_list[[1]])
tolower(my_list[[3]])
vector(mode = "list", length = 3)
# define capture object
output_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
output_list[[x]] <- tolower(my_list[[x]])
}
output_list
# define capture object
output_list <- vector(mode = "list", length = 3)
# write sequence
for (x in seq_along(my_list)) {
# write operations/capture in object
output_list[[x]] <- tolower(my_list[[x]])
# clean up container
names(output_list) <- c("words", "sentences", "letters")
}
output_list
(function(x) tolower(x))("pIrAtES Ship")
(\(x) tolower(x))("pIrAtES Ship")
lapply(X = my_list, FUN = tolower)
str(my_list[1])
sapply(X = my_list[1], FUN = tolower)
str(my_list[[1]])
sapply(X = my_list[[1]], FUN = tolower)
identical(x = sapply(X = my_list, FUN = tolower),
y = lapply(X = my_list, FUN = tolower))
identical(
# standard
x = lapply(X = my_list, FUN = tolower),
# anonymous shorthand
y = my_list |> lapply(\(x) tolower(x))
)
identical(
# standard
x = sapply(X = my_list, FUN = tolower),
# anonymous shorthand
y = my_list |> sapply(\(x) tolower(x))
)
my_words <- my_list[['words']]
tolower(my_words)
purrr::map(.x = my_list, .f = tolower)
# compare outputs
identical(
# standard syntax
x = purrr::map(.x = my_list,
.f = tolower),
# shorthand anonymous function
y = my_list |>
purrr::map(\(x) tolower(x))
)
mixed_list <- list(booleans = c(FALSE, TRUE, FALSE, TRUE),
integers = c(3L, 4L, 2L, 9L, 1L),
doubles = c(3.041, 2.735, 2.987, 3.044, 2.95),
strings = c("true", "depend", "client", "equal", "round"),
dates = structure(c(19453, 19413, 19363), class = "Date"))
mixed_list |> names()
mixed_list |> purrr::map_lgl(\(x) is.logical(x))
mixed_list |> purrr::map_int(\(x) is.integer(x))
mixed_list |> purrr::map_dbl(\(x) is.double(x))
mixed_list |> purrr::map_chr(\(x) is.character(x))
mixed_list |> purrr::map_vec(\(x) is.character(x))
mixed_list |> purrr::map_vec(\(x) lubridate::is.Date(x))
knitr::include_graphics("img/github-raw-url.png")
# get example URL
nyt_url <- "https://raw.githubusercontent.com/mjfrigaard/dds-data/main/nyt1.csv"
# extract directory (i.e. common domain from URL)
nyt_dir_url <- fs::path_dir(nyt_url)
nyt_dir_url
# create file names for 7th through 13th
nyt_file_nms <- paste0("nyt", 7:13, ".csv")
head(nyt_file_nms, 3)
# combine domain with file name
nyt_file_urls <- paste(nyt_dir_url, nyt_file_nms, sep = "/")
head(nyt_file_urls, 3)
nyt_local_dir <- "dds-nyt"
# create folder
fs::dir_create(nyt_local_dir)
# create file paths
nyt_local_pths <- paste(nyt_local_dir, nyt_file_nms, sep = "/")
head(nyt_local_pths)
walk2(
.x = nyt_file_urls, .y = nyt_local_pths, # inputs
.f =  download.file, # function
.progress = TRUE, quiet = TRUE # additional arguments
)
knitr::include_graphics("img/progress.png")
# get file paths
file_pths <- list.files("dds-nyt", full.names = TRUE, pattern = ".csv$")
# do it for one
gsub(pattern = "^dds-nyt", replacement = "dds-nyt/raw", x = file_pths[1])
raw_file_pths <-  purrr::map_chr(
.x = file_pths,
.f = gsub,
pattern = "^dds-nyt",
replacement = "dds-nyt/raw")
head(raw_file_pths, 2)
fs::dir_create("dds-nyt/raw")
# do it for one
fs::file_copy(
path = file_pths[1],
new_path = raw_file_pths[1],
overwrite = TRUE)
fs::dir_tree("dds-nyt/raw", type = "any")
purrr::walk2(.x = file_pths, .y = raw_file_pths,
.f = fs::file_copy,
.progress = TRUE, overwrite = TRUE
)
fs::dir_tree("dds-nyt/raw", type = "any")
fs::dir_tree("dds-nyt/", type = "any", recurse = FALSE)
purrr::walk(
# list CURRENT files
.x = list.files(
path = "dds-nyt",
pattern = ".csv$",
full.names = TRUE),
# map function
.f = fs::file_delete)
fs::dir_tree("dds-nyt/", type = "any", recurse = TRUE)
nyt1 <- vroom::vroom(
file = raw_file_pths[1],
delim = ",",
show_col_types = FALSE)
head(nyt1)
nyt_data_processing <- function(nyt_csv) {
orig_nms <- c("Age", "Gender", "Impressions", "Clicks", "Signed_In")
nyt_nms <- names(nyt_csv)
if (isFALSE(identical(x = orig_nms, y = nyt_nms))) {
cli::cli_abort("these data don't have the correct columns!")
} else {
nyt_proc <- nyt_csv |> dplyr::mutate(age_group = case_when(
# create age_group variable
Age < 18 ~ "<18", Age >= 18 & Age < 30 ~ "18-30", Age >= 30 & Age < 45 ~ "30-44",
Age >= 45 & Age < 65 ~ "45-65", Age >= 65 ~ "65+"),
# factor age_group (ordered)
age_group = factor(age_group, levels = c("<18", "18-30", "30-44", "45-65", "65+"), ordered = TRUE),
# create CTR variable
ctr_rate = round(x = Clicks/Impressions, digits = 3),
# create new Female variable
female = case_when(Gender == 0 ~ "yes", Gender == 1 ~ "no", TRUE ~ NA_character_),
# factor female (un-ordered)
female = factor(female, levels = c("no", "yes")),
Signed_In = case_when(Signed_In == 0 ~ "no", Signed_In == 1 ~ "yes", TRUE ~ NA_character_),
# factor Signed_In (un-ordered) & format columns
Signed_In = factor(Signed_In, levels = c("no", "yes"))) |> janitor::clean_names()
}
return(nyt_proc)
}
raw_data_pths <- list.files(path = "dds-nyt/raw", pattern = ".csv$", full.names = TRUE)
raw_data_pths |>
# names
purrr::set_names() |>
# import
purrr::map(
vroom::vroom,
delim = ",", show_col_types = FALSE) |>
# wrangle
purrr::map(.f = nyt_data_processing) |>
str(list.len = 2)
raw_data_pths |>
# names
purrr::set_names() |>
# import
purrr::map(
vroom::vroom,
delim = ",", show_col_types = FALSE) |>
# wrangle
purrr::map(.f = nyt_data_processing) |>
str()
raw_data_pths <- list.files(path = "dds-nyt/raw", pattern = ".csv$", full.names = TRUE)
raw_data_pths |>
# names
purrr::set_names() |>
# import
purrr::map(vroom::vroom, delim = ",", show_col_types = FALSE) |>
# wrangle
purrr::map(.f = nyt_data_processing) |>
head(2) |>
str()
raw_data_pths <- list.files(path = "dds-nyt/raw", pattern = ".csv$", full.names = TRUE)
raw_data_pths |>
# names
purrr::set_names() |>
head(2) |>
str()
raw_data_pths |>
# names
purrr::set_names() |>
head(2)
xaringan::inf_mr()
fs::dir_tree("dds-nyt/", pattern = "csv$")
